import mongoose, { Schema, Document } from 'mongoose';

// ==================== STUDENT SCHEMA ====================
export interface IStudent extends Document {
  studentId: string;          // Mã học sinh (HS001, HS002...)
  fullName: string;           // Họ và tên đầy đủ
  class: string;              // Lớp học
  email?: string;             // Email (tùy chọn)
  phone?: string;             // Số điện thoại (tùy chọn)
  parentPhone?: string;       // Số điện thoại phụ huynh
  address?: string;           // Địa chỉ
  dateOfBirth?: Date;         // Ngày sinh
  gender?: 'male' | 'female'; // Giới tính
  status: 'active' | 'inactive' | 'transferred'; // Trạng thái học sinh
  createdAt: Date;
  updatedAt: Date;
}

const StudentSchema = new Schema<IStudent>({
  studentId: { 
    type: String, 
    required: true, 
    unique: true,
    match: /^HS\d{3,}$/  // Validate format HSxxx
  },
  fullName: { type: String, required: true, trim: true },
  class: { type: String, required: true },
  email: { 
    type: String, 
    lowercase: true,
    match: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  },
  phone: { type: String, match: /^(\+84|0)[0-9]{9,10}$/ },
  parentPhone: { type: String, match: /^(\+84|0)[0-9]{9,10}$/ },
  address: { type: String, trim: true },
  dateOfBirth: { type: Date },
  gender: { type: String, enum: ['male', 'female'] },
  status: { 
    type: String, 
    enum: ['active', 'inactive', 'transferred'],
    default: 'active'
  }
}, {
  timestamps: true
});

// ==================== CLASS SCHEMA ====================
export interface IClass extends Document {
  classId: string;            // Mã lớp (10a1, 11a2...)
  className: string;          // Tên lớp (Lớp 10A1)
  grade: number;              // Khối (10, 11, 12)
  homeRoomTeacher: string;    // Giáo viên chủ nhiệm
  academicYear: string;       // Năm học (2024-2025)
  maxStudents: number;        // Sĩ số tối đa
  currentStudents: number;    // Sĩ số hiện tại
  schedule: {
    dayOfWeek: number[];      // Thứ trong tuần [2,4,6]
    startTime: string;        // Giờ bắt đầu "07:00"
    endTime: string;          // Giờ kết thúc "11:30"
  };
  status: 'active' | 'inactive' | 'completed';
  createdAt: Date;
  updatedAt: Date;
}

const ClassSchema = new Schema<IClass>({
  classId: { 
    type: String, 
    required: true, 
    unique: true,
    lowercase: true
  },
  className: { type: String, required: true },
  grade: { type: Number, required: true, min: 6, max: 12 },
  homeRoomTeacher: { type: String, required: true },
  academicYear: { 
    type: String, 
    required: true,
    match: /^\d{4}-\d{4}$/  // Format: 2024-2025
  },
  maxStudents: { type: Number, default: 40, min: 20, max: 50 },
  currentStudents: { type: Number, default: 0, min: 0 },
  schedule: {
    dayOfWeek: [{ type: Number, min: 2, max: 7 }], // 2-7 (Thứ 2 - Chủ nhật)
    startTime: { type: String, required: true },
    endTime: { type: String, required: true }
  },
  status: { 
    type: String, 
    enum: ['active', 'inactive', 'completed'],
    default: 'active'
  }
}, {
  timestamps: true
});

// ==================== ATTENDANCE RECORD SCHEMA ====================
export interface IAttendanceRecord extends Document {
  attendanceId: string;           // ID điểm danh duy nhất
  studentId: string;              // Mã học sinh
  studentName: string;            // Tên học sinh (để query nhanh)
  classId: string;                // Mã lớp
  date: Date;                     // Ngày điểm danh
  session: 'morning' | 'afternoon' | 'evening'; // Ca học
  status: 'present' | 'absent-excused' | 'absent-unexcused' | 'late'; // Trạng thái
  note?: string;                  // Ghi chú (lý do vắng)
  recordedBy: string;             // Người điểm danh
  recordedAt: Date;               // Thời gian điểm danh
  isEdited: boolean;              // Đã chỉnh sửa hay chưa
  editHistory?: {                 // Lịch sử chỉnh sửa
    editedBy: string;
    editedAt: Date;
    previousStatus: string;
    reason: string;
  }[];
  createdAt: Date;
  updatedAt: Date;
}

const AttendanceRecordSchema = new Schema<IAttendanceRecord>({
  attendanceId: { type: String, required: true, unique: true },
  studentId: { type: String, required: true },
  studentName: { type: String, required: true },
  classId: { type: String, required: true },
  date: { type: Date, required: true },
  session: { 
    type: String, 
    enum: ['morning', 'afternoon', 'evening'],
    required: true 
  },
  status: { 
    type: String, 
    enum: ['present', 'absent-excused', 'absent-unexcused', 'late'], 
    required: true 
  },
  note: { type: String, trim: true },
  recordedBy: { type: String, required: true },
  recordedAt: { type: Date, default: Date.now },
  isEdited: { type: Boolean, default: false },
  editHistory: [{
    editedBy: { type: String, required: true },
    editedAt: { type: Date, default: Date.now },
    previousStatus: { type: String, required: true },
    reason: { type: String, required: true }
  }]
}, {
  timestamps: true
});

// ==================== ATTENDANCE SESSION SCHEMA ====================
export interface IAttendanceSession extends Document {
  sessionId: string;              // ID phiên điểm danh
  classId: string;                // Mã lớp
  date: Date;                     // Ngày điểm danh
  session: 'morning' | 'afternoon' | 'evening'; // Ca học
  teacherId: string;              // Mã giáo viên điểm danh
  teacherName: string;            // Tên giáo viên
  totalStudents: number;          // Tổng số học sinh
  presentCount: number;           // Số học sinh có mặt
  absentCount: number;            // Số học sinh vắng
  lateCount: number;              // Số học sinh muộn
  status: 'in-progress' | 'completed' | 'cancelled'; // Trạng thái phiên
  startTime?: Date;               // Thời gian bắt đầu điểm danh
  endTime?: Date;                 // Thời gian kết thúc điểm danh
  notes?: string;                 // Ghi chú chung
  createdAt: Date;
  updatedAt: Date;
}

const AttendanceSessionSchema = new Schema<IAttendanceSession>({
  sessionId: { type: String, required: true, unique: true },
  classId: { type: String, required: true },
  date: { type: Date, required: true },
  session: { 
    type: String, 
    enum: ['morning', 'afternoon', 'evening'],
    required: true 
  },
  teacherId: { type: String, required: true },
  teacherName: { type: String, required: true },
  totalStudents: { type: Number, required: true, min: 0 },
  presentCount: { type: Number, default: 0, min: 0 },
  absentCount: { type: Number, default: 0, min: 0 },
  lateCount: { type: Number, default: 0, min: 0 },
  status: { 
    type: String, 
    enum: ['in-progress', 'completed', 'cancelled'],
    default: 'in-progress'
  },
  startTime: { type: Date },
  endTime: { type: Date },
  notes: { type: String, trim: true }
}, {
  timestamps: true
});

// ==================== TEACHER SCHEMA ====================
export interface ITeacher extends Document {
  teacherId: string;              // Mã giáo viên
  fullName: string;               // Họ và tên
  email: string;                  // Email
  phone: string;                  // Số điện thoại
  subject?: string;               // Môn học
  homeRoomClass?: string;         // Lớp chủ nhiệm
  status: 'active' | 'inactive';  // Trạng thái
  createdAt: Date;
  updatedAt: Date;
}

const TeacherSchema = new Schema<ITeacher>({
  teacherId: { type: String, required: true, unique: true },
  fullName: { type: String, required: true, trim: true },
  email: { 
    type: String, 
    required: true,
    unique: true,
    lowercase: true,
    match: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  },
  phone: { 
    type: String, 
    required: true,
    match: /^(\+84|0)[0-9]{9,10}$/
  },
  subject: { type: String, trim: true },
  homeRoomClass: { type: String },
  status: { 
    type: String, 
    enum: ['active', 'inactive'],
    default: 'active'
  }
}, {
  timestamps: true
});

// ==================== INDEXES FOR PERFORMANCE ====================
// Student indexes
StudentSchema.index({ studentId: 1 });
StudentSchema.index({ class: 1 });
StudentSchema.index({ status: 1 });
StudentSchema.index({ class: 1, status: 1 });

// Class indexes
ClassSchema.index({ classId: 1 });
ClassSchema.index({ grade: 1 });
ClassSchema.index({ academicYear: 1 });
ClassSchema.index({ status: 1 });
ClassSchema.index({ homeRoomTeacher: 1 });

// Attendance Record indexes
AttendanceRecordSchema.index({ studentId: 1, date: 1, session: 1 }, { unique: true });
AttendanceRecordSchema.index({ classId: 1, date: 1, session: 1 });
AttendanceRecordSchema.index({ date: 1, status: 1 });
AttendanceRecordSchema.index({ studentId: 1, date: -1 });
AttendanceRecordSchema.index({ recordedBy: 1, date: -1 });

// Attendance Session indexes
AttendanceSessionSchema.index({ classId: 1, date: 1, session: 1 }, { unique: true });
AttendanceSessionSchema.index({ teacherId: 1, date: -1 });
AttendanceSessionSchema.index({ date: 1, status: 1 });

// Teacher indexes
TeacherSchema.index({ teacherId: 1 });
TeacherSchema.index({ email: 1 });
TeacherSchema.index({ homeRoomClass: 1 });
TeacherSchema.index({ status: 1 });

// ==================== EXPORT MODELS ====================
export const Student = mongoose.models.Student || mongoose.model<IStudent>('Student', StudentSchema);
export const Class = mongoose.models.Class || mongoose.model<IClass>('Class', ClassSchema);
export const AttendanceRecord = mongoose.models.AttendanceRecord || mongoose.model<IAttendanceRecord>('AttendanceRecord', AttendanceRecordSchema);
export const AttendanceSession = mongoose.models.AttendanceSession || mongoose.model<IAttendanceSession>('AttendanceSession', AttendanceSessionSchema);
export const Teacher = mongoose.models.Teacher || mongoose.model<ITeacher>('Teacher', TeacherSchema);